<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第四章 on Deep Dive into Hugo: Becoming an Expert in the Static Site Generator Domain</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/04/</link><description>Recent content in 第四章 on Deep Dive into Hugo: Becoming an Expert in the Static Site Generator Domain</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hugo.notes.sunwei.xyz/docs/chapter/04/index.xml" rel="self" type="application/rss+xml"/><item><title>4.1 Hugoverse</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/04/hugoverse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/04/hugoverse/</guid><description>Hugoverse # Hugoverse是一个静态站点生成领域的开源项目，是为本书所创建。
当我尝试理解Hugo源码时，我不希望了解到的知识都是碎片状的，我更希望以有机的方式将他们全部都结合起来。 因为想完整的掌握静态站点生成这个领域，DDD就成了一个不错的方法。 我也是采用了领域驱动设计（DDD）的方式，来构建了一个被称为&amp;quot;Hugoverse&amp;quot;的项目。 这样一来，理论结合了实际，通过阅读源码，动手实战的方法，将帮助我们迈出成为领域专家过程中至关重要的一步。
对我而言，“show me the code”不仅仅是获取理论知识，更重要的是通过实际编码和动手实践来理解和应用这些概念。 更是软件工程师追崇实干精神的一种具体体现。
Hugoverse不仅是一个概念上的模型，更是一个通过实际代码来呈现和演示Hugo源码核心原理的实体。 通过实践，我将领域驱动设计的理念贯穿到源码中，以一种更贴近实际应用的方式来解释和展示Hugo的工作原理。 这种方式不仅使我们更深入地理解了源码，也使我们能够将这些理念和实践方便地分享给他人，帮助大家更好地理解和运用Hugo源码和静态站点领域技能。
本地安装 Hugoverse # 先根据 Hugoverse Readme在本地准备好环境。
准备好开发环境 # 下载源码
git clone git@github.com:dddplayer/hugoverse.git 安装依赖
go install 构建可执行文件hugov
go build -o hugov 查看命令
➜ hugoverse git:(main) ✗ ./hugov Usage: hugov [command] Commands: build: generate static site for Hugo project server: start the headless CMS server demo: create demo Hugo project version: show hugoverse command version Example: hugov build -p path/to/your/hugo/project 这样，我们就准备好了Hugoverse项目。</description></item><item><title>4.2 样例工程</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/04/demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/04/demo/</guid><description>Hugo 样例工程 # 在源码精读的 Hugo本地环境搭建环节，我们有搭建一个简单的样例博客。
让我们继续使用这个样例，来打造我们的Hugoverse。
创建Hugo样例项目Demo # 使用我们在上一节准备好的hugoverse命令行工具hugov，来帮助我们创建这个样例项目。
➜ hugoverse git:(main) ✗ ./hugov demo demo dir: /var/folders/rt/bg5xpyj51f98w79j6s80wcr40000gn/T/hugoverse-temp-dir782641825 查看Demo项目结构:
创建成功后，我们会得到一个临时项目路径，让我们用tree命令帮助查看一下文件结构。
➜ hugoverse git:(main) ✗ cd /var/folders/rt/bg5xpyj51f98w79j6s80wcr40000gn/T/hugoverse-temp-dir782641825 ➜ hugoverse-temp-dir782641825 tree . ├── config.toml ├── layouts │ ├── _default │ │ └── single.html │ └── index.html ├── mycontent │ └── blog │ └── post.md ├── myproject.txt └── themes └── mytheme └── mytheme.txt 7 directories, 6 files 可以看到包含了:
配置文件config.toml # ➜ hugoverse-temp-dir782641825 cat config.</description></item><item><title>4.3 DDD配置信息</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/04/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/04/config/</guid><description>DDD Hugo 配置信息 # 在用DDD来驱动Hugo配置信息开发之前，让我们先来回顾一下 Hugo源码精读 配置中所描述到的主要实现思路。
将配置文件config.toml转换成map:
再将默认配置信息加入其中
收集模块配置信息
通过这些处理后，我们就能准备好完整的配置信息了。
但在静态站点生成领域里，又需要怎么样去组织这些对象，才能让大家协同并高效合作呢？
Hugoverse Config 信息流 # 先来看看在交六边型架构的Hugoverse中，Config模块是如何和处部交互的：
➜ hugoverse git:(main) ~/go/bin/dp normal -m ./ -p github.com/dddplayer/hugoverse/internal/domain/config -mf 线上可缩放版本可 点这里查看。
从图中可看到Config模块主要是通过实体Config的Load方法对外提供服务的，主要调用路径有两条：
main -&amp;gt; cmd/New -&amp;gt; interface/buildCmd.Run -&amp;gt; application/GenerateStaticSite -&amp;gt; entity/Config.Load main -&amp;gt; cmd/New -&amp;gt; interface/serverCmd.Run -&amp;gt; interface/api/NewServer -&amp;gt; interface/api/Server.registerHandler -&amp;gt; interface/api/Server.handleConfig -&amp;gt; application/AllConfigurationInformation -&amp;gt; entity/Config.Load 第一条是用来构建静态站点的，通过提供的应用服务GenerateStaticSite发起的调用。
第二条则是用来提供Headless CMS API服务发起的，通过提供的应用服务AllConfigurationInformation发起的调用。
Config 内部组织结构 # 看完了流程图后，我们理解到外部和Config模块是怎么交互的。 接下来让我们一起来看看Config模块的内部组成。
➜ hugoverse git:(main) ✗ ~/go/bin/dp normal -m .</description></item><item><title>4.3 六边形架构</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/04/hexagon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/04/hexagon/</guid><description>六边形架构 # 六边形架构（Hexagonal Architecture）和领域驱动设计（DDD）是两种软件设计理念，它们可以结合使用以创建可维护、灵活且高效的系统。
六边形架构着重于将系统的关注点分离开来，使得核心业务逻辑与外部环境（例如数据库、UI、外部服务等）解耦。 它将系统划分为内部和外部两个区域，内部区域包含核心业务逻辑，外部区域是与外界交互的接口。这种设计使得系统更易于测试、扩展和维护。
领域驱动设计（DDD）则聚焦于解决复杂业务领域的建模问题。它强调理解和建模业务领域，并将业务需求映射到软件设计中。 DDD提倡通过领域模型来表达业务概念，将软件设计与业务领域紧密结合，从而更好地理解和解决业务问题。
这两种理念可以协同工作。 六边形架构可以作为一种架构风格，帮助将系统按照内部和外部进行划分，而DDD则提供了一种方法来深入理解业务领域，并在系统中建立相应的领域模型。 通过将六边形架构和DDD相结合，可以在系统中建立清晰的业务边界，使得系统更易于扩展、维护和理解，并且更好地满足业务需求。
Hugoverse的目录结构 # ➜ hugoverse git:(main) ✗ tree -L 3 -d . ├── cmd ├── dddplayer ├── internal │ ├── application │ ├── domain │ │ ├── config │ │ ├── deps │ │ ├── fs │ │ ├── hugosites │ │ ├── language │ │ ├── pathspec │ │ ├── site │ │ └── template │ └── interfaces │ ├── api │ └── cmd └── pkg ├── hreflect ├── htime ├── lazy ├── log ├── overlayfs ├── paths ├── radixtree └── types └── hstring 27 directories 结合下图进行理解：</description></item></channel></rss>