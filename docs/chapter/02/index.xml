<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第二章 on Deep Dive into Hugo: Becoming an Expert in the Static Site Generator Domain</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/02/</link><description>Recent content in 第二章 on Deep Dive into Hugo: Becoming an Expert in the Static Site Generator Domain</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hugo.notes.sunwei.xyz/docs/chapter/02/index.xml" rel="self" type="application/rss+xml"/><item><title>2.1 DDD简介</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/02/ddd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/02/ddd/</guid><description>DDD简介 # 领域驱动设计（DDD）的历史可以追溯到上世纪90年代，主要由埃里克·埃文斯（Eric Evans）在他的著作《领域驱动设计》（Domain-Driven Design）中首次提出。 在这本书中，埃里克·埃文斯总结了他在开发复杂软件系统时的实践经验，提出了一系列关于建模、设计和实现的概念。
主要历程 # 早期实践： 在软件开发的早期阶段，开发者主要关注技术实现而忽略了对业务领域的深入理解。这导致了一些项目在处理复杂业务问题时的混乱和失败。
埃里克·埃文斯的贡献： 在《领域驱动设计》一书中，埃里克·埃文斯提出了一套方法，强调通过深入理解业务领域来指导软件设计。他引入了许多概念，如聚合、实体、值对象等，以及对领域模型的重要性。
模型驱动设计： DDD 的理念逐渐被广泛接受，许多开发者开始意识到在软件开发中建立和使用良好的领域模型是至关重要的。
领域驱动设计的演进： 随着时间的推移，DDD 不断演变和发展，逐渐形成了一整套完整的方法论，包括战术设计和战略设计等方面。
为什么现在这么火 # 复杂业务需求： 当今的软件系统面临着越来越复杂的业务需求，传统的技术驱动方法在处理这些复杂性方面显得力不从心。DDD 提供了一种更贴近实际业务需求的设计方法。
微服务架构的兴起： 随着微服务架构的兴起，领域驱动设计成为设计微服务的理想选择。微服务的核心是按照业务功能划分服务，而这正是 DDD 所强调的。
开源社区的支持： 开源社区中涌现出许多与领域驱动设计相关的工具和框架，例如 Axon Framework、DDD Community 等，这进一步推动了 DDD 的普及。
敏捷和迭代开发： DDD 支持敏捷和迭代开发的理念，使团队能够更加灵活地应对业务变化，以及更好地应对不断变化的市场需求。
DDD之所以现在变得如此受欢迎，是因为它提供了一种更加有效和实用的方法，能够更好地应对当今复杂、敏捷和快速变化的软件开发环境。
基本概念 # 领域驱动设计，简称DDD，是一种面向复杂软件系统开发的方法论。 它强调将软件系统建模与业务领域的实际问题相结合，以确保开发人员和业务团队之间的共同理解。 DDD 提倡通过深入理解业务领域来构建系统，将业务专业知识融入软件设计和实现的过程中。
在领域驱动设计中，有几个核心概念：
领域模型： 领域模型是对业务领域的抽象，是一种形式化的表示，用于描述系统中涉及的业务概念、规则和流程。领域模型不仅仅是一份文档，还可以在代码中直接体现。
聚合和实体： DDD 强调聚合的概念，即一组相关的对象被看作一个单一的单元。实体是领域模型的核心，通常对应于业务领域中具有唯一标识的事物。
值对象： 值对象是没有唯一标识的对象，它们的相等性基于它们的属性而不是标识。在领域模型中，值对象通常用于表示某些重要概念的属性。
仓储： 仓储是用于访问领域模型的持久化机制，负责将领域对象存储到数据库中并从中检索。
限界上下文： DDD 强调在不同的上下文中使用不同的模型来解决问题。每个上下文都有其自己的限界，即它关注的领域范围。
领域事件： 领域事件是对领域内发生的重要事实的表示。它们可以被用于在不同的上下文之间传递信息。
领域设计 # 在领域驱动设计（DDD）中，还有战略设计和战术设计两个关键的概念，用于指导不同层次的设计决策。
战略设计（Strategic Design） # 定义： 战略设计关注的是在整个系统层面上的设计决策，包括组织领域模型、划分限界上下文（Bounded Context）等。 它涉及的是在宏观层面上的系统架构和整体设计。</description></item><item><title>2.2 DDD应用</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/02/dddplayer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/02/dddplayer/</guid><description>DDD在本书中的应用 # 我们会使用领域驱动设计（DDD）思想贯穿整个源码的解析。 从源码分析开始，借助辅助工具 dddplayer 对Hugo源码进行深入分析。 这会给我们提供代码结构和信息流的详细信息，以确保我们对源码结构有清晰地认识。
再将源码拆解为一个个的功能点，每个功能点代表着系统中的一个特定任务或操作。 这样可以帮助我们了解各个功能点之间的关系和依赖，并动手练习，掌握每一个功能点。 通过动手实现这些功能点，将有助于我们更好地理解源码中的交互和业务逻辑。
接下来，让我们把这些功能点关联起来，一起动手实现一个小巧的静态站点生成服务。 我们将运用领域驱动设计的思维方式，将这些功能点按DDD概念有机的融合在一起，形成一个完整的服务 - Hugoverse（书中例子的名字）。
在这个过程中，我们会使用战略图和战术图来一步步可视化我们实现的系统。 战略图用于指导整个系统的组织结构和限界，而战术图则更关注限界内部的微观设计决策。
我们会应用六边型项目结构，确保项目组织符合DDD的原则。 这包括清晰的限界上下文、领域模型的定义、实体和值对象的划分、以及聚合的设计等。 通过这一步步的构建，我们致力于打造一个能够更好地反映业务需求和更易于维护的系统。
这个过程将源码解析、功能点拆解、DDD思维、战略图和战术图等结合在一起。 以确保我们在开发过程中更加注重业务需求，建立起一个有机、清晰且符合DDD原则的软件系统。 这种方法有助于我们对系统的整体理解，同时确保代码的可维护性和灵活性。
辅助工具DDDPlayer简介 # DDDPlayer是一款战略和战术治理工具，通过源码分析实时生成战略图和战术图，帮助团队保持业务和代码的一致性。
分析源码组成结构 # 可以用来分析Golang源码，帮助我们深入理解源码组成和结构。
比如我们想了解github.com/gohugoio/hugo/config/allconfig模块下结构体之间的关联关系： DDDPlayer可以帮我们生成如结构图： 可 线上查看细节。
分析源码组信息流 # 还可以分析模块间的调用关系。
如果我们想了解allconfig模块是怎么被外部调用的，我们还可以用DDDPlayer帮助我们生成信息流图： 可 线上查看细节
生成DDD战略图 # Clean Markdown是用DDD实现的一个样例项目。
我们可以用DDDPlayer帮助我们生成战略图： 生成DDD战术图 # 还可以帮我们生成战术图： 有了DDDPlayer后，将大大方便我们理解源码，以及用DDD的方式实现我们的领域服务。</description></item></channel></rss>