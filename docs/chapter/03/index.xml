<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第三章 on Deep Dive into Hugo: Becoming an Expert in the Static Site Generator Domain</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/03/</link><description>Recent content in 第三章 on Deep Dive into Hugo: Becoming an Expert in the Static Site Generator Domain</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hugo.notes.sunwei.xyz/docs/chapter/03/index.xml" rel="self" type="application/rss+xml"/><item><title>3.1 源码阅读步骤</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/03/read/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/03/read/</guid><description> 源码阅读步骤介绍 # 工欲善其事，必先利其器。
为了更好地享受源码阅读的过程，我们需要做一些准备工作。
在开始阅读源码前，先了解一下Hugo的架构设计，这样会提供给我们一个全局视野。 这会在我们的脑海里创建一个完整的模块拼图，为接下来的深入了解模块做好引导准备。
了解完基础架构和针对每个模块细节练习后，我们就可以在DDD的帮助下，梳理出领域知识，为我们创造自己的领域服务做好准备了。
下面是源码阅读具体步骤：
搭建好Hugo项目本地开发环境 安装辅助工具DDDPlayer（如果想要亲自己试一试，强烈推荐） 理解Hugo架构设计，方便后继深入理解主流程上的每一个关键组件 对关键组件的逐个击破，并动手实践每个模块后的小练习（有附样例源码） 应用DDD，我们自己动手，应用上面练习过程中的知识，从头开始实现一个精简版的Hugo，我们把这个项目先取名为Hugoverse。</description></item><item><title>3.2 Hugo环境搭建</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/03/prerequisite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/03/prerequisite/</guid><description>Hugo本地环境搭建 # 搭建 Hugo 源码的阅读环境步骤：
1. 安装 Git # 首先，确保你的机器上安装了 Git。 你可以从 Git 官方网站下载并安装。
2. 安装 Go # Hugo 是使用 Go 语言编写的，因此你需要安装 Go。 你可以从 Go 官方网站下载并安装。
示例：
➜ go version go version go1.21.1 darwin/amd64 3. 获取 Hugo 源码 # 在终端中运行以下命令，获取 Hugo 的源代码：
git clone git@github.com:gohugoio/hugo.git 4. 进入 Hugo 源码目录 # cd path/to/gohugoio/hugo 5. 构建 Hugo # 在源码目录中运行以下命令，构建 Hugo：
go install 6. 验证环境 # go build -o hugo ./hugo version 如果一切正常，你应该看到 Hugo 的版本信息。</description></item><item><title>3.3 安装DDDPlayer</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/03/dddplayer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/03/dddplayer/</guid><description> 安装DDDPlayer # 从源码安装：
go install github.com/dddplayer/dp@latest 示例：
➜ ~/go/bin/dp version dddplayer v0.4.0 darwin/amd64 BuildDate=unknown</description></item><item><title>3.4 Hugo的架构设计</title><link>https://hugo.notes.sunwei.xyz/docs/chapter/03/arch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/docs/chapter/03/arch/</guid><description>Hugo的架构设计 # 本节的目标就是打开藏宝图来了解Hugo的基础架构，主要从以下两个方向展开：
对架构思路做一个概要说明，对基础架构有一个全貌的理解 从模块代码入手，讨论配置和语言的关系、Hugo的模块、文件系统的组织、站点内容的收集方案、模板的生命周期，以及发布的流程。 通过阅读本章内容，我们将会对Hugo这个站点构建工具有一个全面的认识，并对各阶段之间的关系有一个清晰地认识，为接下来详细源码实现讲解章节打好基础。
出发吧，伟大的工程师啊！
架构设计图 # Hugo的主营业务就是构建静态站点。 那从代码架构层面，是如何体现出来Hugo的构建思路的呢？
站点构建就是将写好的内容，转化成Web服务器能理解的网站资源。 比如我们写作的时候用的是Markdown格式，生成的网站资源通常是HTML格式。
下面让我们一起来探索Hugo的架构。
从 Hugo本地环境搭建的样例项目中，我们可以看到Hugo是根据配置文件信息进行构建的，那我们可以先了解一下Hugo源码里的配置模块。
了解 config 模块信息 # ➜ hugo git:(master) ✗ tree -L 1 -d . ├── bufferpool ├── cache ├── codegen ├── commands ├── common ├── compare ├── config ├── create ├── dddplayer ├── deploy ├── deps ├── docs ├── docshelper ├── helpers ├── htesting ├── hugofs ├── hugolib ├── identity ├── langs ├── lazy ├── livereload ├── main ├── markup ├── media ├── metrics ├── minifiers ├── modules ├── navigation ├── output ├── parser ├── public ├── publisher ├── related ├── releaser ├── resources ├── scripts ├── snap ├── source ├── testscripts ├── tpl ├── transform └── watcher 43 directories 通过tree命令，很方便我们查找目录结构，很快就定位到了config目录。</description></item></channel></rss>