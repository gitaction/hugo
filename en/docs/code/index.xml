<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码实现 on Deep Understanding of Hugo</title><link>https://hugo.notes.sunwei.xyz/en/docs/code/</link><description>Recent content in 源码实现 on Deep Understanding of Hugo</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hugo.notes.sunwei.xyz/en/docs/code/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://hugo.notes.sunwei.xyz/en/docs/code/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo.notes.sunwei.xyz/en/docs/code/config/</guid><description>Config源码分析 # 在 基础架构中，从基础架构的视角出发。 有提到配置模块，以及 配置和语言的关系。
下面我们从源码实现的角度，详细的来看看Hugo是如何设计和实现配置模块的。
跬步千里 - Config模块源码 # 将 游乐场源码， 切换到 01-config分支：
➜ hugo-playground git:(main) git checkout 01-config Switched to branch &amp;#39;01-config&amp;#39; Your branch is up to date with &amp;#39;origin/01-config&amp;#39;. ➜ hugo-playground git:(01-config) 通过将源码按配置模块进行裁剪，Config模块在我们面前也变得清晰，让我们在Hugo源码学习的道路上迈出了自信的一步。 通过命令行，我们可以看看具体的目录结构：
➜ hugo-playground git:(01-config) tree . ├── LICENSE ├── README.md ├── command.sh ├── common │ ├── maps │ │ ├── maps.go │ │ └── params.go │ └── paths │ └── path.go ├── config │ ├── commonConfig.</description></item></channel></rss>