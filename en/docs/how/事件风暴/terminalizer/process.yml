# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /Users/sunwei/github/sunwei/hugo-playground
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 94
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 22
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 100
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: Terminalizer
    style:
      border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 12
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 390
    content: "\r\nThe default interactive shell is now zsh.\r\nTo update your account to use zsh, please run `chsh -s /bin/zsh`.\r\nFor more details, please visit https://support.apple.com/kb/HT208050.\r\n\e[?1034hsunweis-MacBook-Pro:hugo-playground sunwei$ "
  - delay: 730
    content: g
  - delay: 56
    content: o
  - delay: 202
    content: ' '
  - delay: 158
    content: r
  - delay: 79
    content: u
  - delay: 191
    content: 'n'
  - delay: 169
    content: ' '
  - delay: 202
    content: .
  - delay: 245
    content: "\r\n"
  - delay: 2975
    content: "==> Process main: prepare example project file systems\r\n==> Process main: load configurations from config.toml and themes\r\n==> Process LoadConfig: start init configLoader\r\n==> Process loadConfig: load config.toml from hard disk\r\n==> Process loadConfig: set loaded config map to configLoader.cfg with key ''\r\n==> Process LoadConfig: apply config defaults\r\n==> Process LoadConfig: load modules config\r\n==> Process decodeConfig: set mytheme as Imports in DefaultModuleConfig, Config{}\r\n==> Process LoadConfig: collect modules with modulesConfig\r\n==> Process collectHook: apply default mounts to project module\r\n==> Process collectModules: set active modules to config with key 'allModules'\r\n==> Process LoadConfig: done\r\n==> Process main: setup hugo file systems based on machine file system and configurations\r\n==> Process newFs: create /public folder\r\n==> Process newFs: new base path fs &BasePathFs{}\r\n==> Process main: create hugo sites based on deps\r\n==> Process createSitesFromConfig: start\r\n==> Process NewLanguages: create multiple languages, only 'en' in our case\r\n==> Process newSite: create site with DepsCfg with language setup\r\n==> Process media.DecodeTypes: set default media types\r\n==> Process output.DecodeFormats: set default output formats based on media types, and customized output formats configuration\r\n==> Process site output formats: map siteOutputFormats to every hugo page types(KindPage, KindHome...)\r\n==> Process createSitesFromConfig: end\r\n==> Process newHugoSites: get number of worker\r\n==> Process newHugoSites: init HugoSites\r\n==> Process newHugoSites: add data to h.init\r\n==> Process newHugoSites: add layouts to h.init\r\n==> Process newHugoSites: configLoader applyDeps\r\n==> Process applyDeps: set cfg.TemplateProvider with DefaultTemplateProvider\r\n==> Process applyDeps: new deps\r\n==> Process New PathSpec: new PathSpec with all source filesystem built\r\n==> Process New resources Spec: with pathSpec, outputFormats, MediaTypes\r\n==> Process New content Spec: content converter provider inside\r\n==> Process New source Spec: with source filesystem and language\r\n==> Process applyDeps-onCreate: set site publisher as DestinationPublisher\r\n==> Process applyDeps-onCreate site initializeSiteInfo: set site title and owner\r\n==> Process applyDeps-onCreate pageMap: with pageTree, bundleTree and pages, sections, resources\r\n==> Process applyDeps-onCreate site PageCollections: with pageMap\r\n==> Process applyDeps-onCreate site RefLinker: to manage ref link\r\n==> Process applyDeps: deps LoadResources to update template provider, need to make template ready\r\n==> Process templateProvider Update: new TemplateExec\r\n==> Process GoFuncs: map template.GoFuncs to funcMap\r\n==> Process GoFuncs: map texttemplate.GoFuncs to funcMap\r\n==> Process newTemplateNamespace: with funcMap\r\n==> Process NewLayoutHandler: to process layout request\r\nwalker err 1\r\nwalker err 1\r\n==> Process main: hugo building...\r\n==> Process HugoSites Build: start\r\n==> Process HugoSites Build process: site initialize with title and owner\r\n==> Process readAndProcessContent: new source spec with PathSpec, ContentInclusionFilter and BaseFs Content.Fs\r\n==> Process readAndProcessContent: collect content with PagesProcessor\r\n==> Process AssemblePages: pageMaps to assemble all pages\r\n==> Process pm.CreateMissingNodes: check root section\r\n==> Process assemblePages: assembleSections firstly\r\n==> Process assemblePages: walk pageMap pages\r\n==> Process pageMap pages.Walk: new page from content node\r\n==> Process pageMap pages.Walk: assemble resources\r\n==> Process render: h.init layouts do start\r\n==> Process newHugoSites: h.init run s.Tmpl().MarkReady\r\nWe only need the clones if base templates are in use.\r\n==> Process render: init site render formats\r\n==> Process site preapre pages for render: pageState init output format\r\n==> Process pageState: init page do start\r\n==> Process pageState: init contentProvider with page content output\r\n==> Process site preapre pages for render: pageState init output format\r\n==> Process pageState: init page do start\r\n==> Process pageState init: new page paths\r\n==> Process pageState init: new page output\r\n==> Process pageState init: init OutputFormatsProvider, targetPathDescriptor, SitesProvider\r\n==> Process pageState: new page content output\r\n==> Process pageState: init contentProvider with page content output\r\n==> Process site preapre pages for render: pageState init output format\r\n==> Process pageState: init page do start\r\n==> Process pageState init: new page paths\r\n==> Process pageState init: new page output\r\n==> Process pageState init: init OutputFormatsProvider, targetPathDescriptor, SitesProvider\r\n==> Process pageState: new page content output\r\n==> Process pageState: init contentProvider with page content output\r\n==> Process render: render start with siteRenderContext\r\n==> Process Site render: render pages\r\n==> Process renderPages: start 3 workers to do page rendering\r\n==> Process render page: resolve template for page\r\n==> Process render page: resolve template for page\r\n==> Process render page: resolve template for page\r\n==> Process render and write page: render for template\r\nlayout: , kind: section, name: HTML==> Process render and write page: render for template\r\n==> Process output initContent: init render hooks\r\n==> Process output initContent: content to render\r\n==> Process render and write page: publish page\r\n==> Process render and write page: publish page\r\n==> Process Site render: render 404\r\n==> Process pageState init: new page paths\r\n==> Process pageState init: new page output\r\n==> Process pageState init: init OutputFormatsProvider, targetPathDescriptor, SitesProvider\r\n==> Process hugoSite render: cross sites robots TXT\r\n==> Process pageState init: new page paths\r\n==> Process pageState init: new page output\r\n==> Process pageState init: init OutputFormatsProvider, targetPathDescriptor, SitesProvider\r\n==> Process render and write page: render for template\r\n==> Process render and write page: publish page\r\n==> Process HugoSites Build: done\r\n===temp dir at last > ...\r\n/var/folders/rt/bg5xpyj51f98w79j6s80wcr40000gn/T/go-hugo-temp-dir445670173\r\n"
  - delay: 6
    content: 'sunweis-MacBook-Pro:hugo-playground sunwei$ '
  - delay: 2345
    content: "logout\r\n"
